{"ast":null,"code":"/* eslint-disable no-restricted-globals */\n// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\nimport { clientsClaim } from 'workbox-core';\nimport { ExpirationPlugin } from 'workbox-expiration';\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\nimport { registerRoute } from 'workbox-routing';\nimport { StaleWhileRevalidate } from 'workbox-strategies';\nclientsClaim(); // Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\n\nprecacheAndRoute(self.__WB_MANIFEST); // Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\n\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\nregisterRoute( // Return false to exempt requests from being fulfilled by index.html.\n_ref => {\n  let {\n    request,\n    url\n  } = _ref;\n\n  // If this isn't a navigation, skip.\n  if (request.mode !== 'navigate') {\n    return false;\n  } // If this is a URL that starts with /_, skip.\n\n\n  if (url.pathname.startsWith('/_')) {\n    return false;\n  } // If this looks like a URL for a resource, because it contains // a file extension, skip.\n\n\n  if (url.pathname.match(fileExtensionRegexp)) {\n    return false;\n  } // Return true to signal that we want to use the handler.\n\n\n  return true;\n}, createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')); // An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\n\nregisterRoute( // Add in any other file extensions or routing criteria as needed.\n_ref2 => {\n  let {\n    url\n  } = _ref2;\n  return url.origin === self.location.origin && url.pathname.endsWith('.png');\n}, // Customize this strategy as needed, e.g., by changing to CacheFirst.\nnew StaleWhileRevalidate({\n  cacheName: 'images',\n  plugins: [// Ensure that once this runtime cache reaches a maximum size the\n  // least-recently used images are removed.\n  new ExpirationPlugin({\n    maxEntries: 50\n  })]\n})); // This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\n\nself.addEventListener('message', event => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n}); // Any other custom service worker logic can go here.","map":{"version":3,"names":["clientsClaim","ExpirationPlugin","precacheAndRoute","createHandlerBoundToURL","registerRoute","StaleWhileRevalidate","self","__WB_MANIFEST","fileExtensionRegexp","RegExp","request","url","mode","pathname","startsWith","match","process","env","PUBLIC_URL","origin","location","endsWith","cacheName","plugins","maxEntries","addEventListener","event","data","type","skipWaiting"],"sources":["Z:/All/Google Drive/All/School/2022 Fall/CIS4327 - Senior Project I/MVC Bartender App/why not start again/client/src/serviceWorker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\r\n\r\n// This service worker can be customized!\r\n// See https://developers.google.com/web/tools/workbox/modules\r\n// for the list of available Workbox modules, or add any other\r\n// code you'd like.\r\n// You can also remove this file if you'd prefer not to use a\r\n// service worker, and the Workbox build step will be skipped.\r\n\r\nimport { clientsClaim } from 'workbox-core';\r\nimport { ExpirationPlugin } from 'workbox-expiration';\r\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\r\nimport { registerRoute } from 'workbox-routing';\r\nimport { StaleWhileRevalidate } from 'workbox-strategies';\r\n\r\nclientsClaim();\r\n\r\n// Precache all of the assets generated by your build process.\r\n// Their URLs are injected into the manifest variable below.\r\n// This variable must be present somewhere in your service worker file,\r\n// even if you decide not to use precaching. See https://cra.link/PWA\r\nprecacheAndRoute(self.__WB_MANIFEST);\r\n\r\n// Set up App Shell-style routing, so that all navigation requests\r\n// are fulfilled with your index.html shell. Learn more at\r\n// https://developers.google.com/web/fundamentals/architecture/app-shell\r\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\r\nregisterRoute(\r\n  // Return false to exempt requests from being fulfilled by index.html.\r\n  ({ request, url }) => {\r\n    // If this isn't a navigation, skip.\r\n    if (request.mode !== 'navigate') {\r\n      return false;\r\n    } // If this is a URL that starts with /_, skip.\r\n\r\n    if (url.pathname.startsWith('/_')) {\r\n      return false;\r\n    } // If this looks like a URL for a resource, because it contains // a file extension, skip.\r\n\r\n    if (url.pathname.match(fileExtensionRegexp)) {\r\n      return false;\r\n    } // Return true to signal that we want to use the handler.\r\n\r\n    return true;\r\n  },\r\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\r\n);\r\n\r\n// An example runtime caching route for requests that aren't handled by the\r\n// precache, in this case same-origin .png requests like those from in public/\r\nregisterRoute(\r\n  // Add in any other file extensions or routing criteria as needed.\r\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.\r\n  new StaleWhileRevalidate({\r\n    cacheName: 'images',\r\n    plugins: [\r\n      // Ensure that once this runtime cache reaches a maximum size the\r\n      // least-recently used images are removed.\r\n      new ExpirationPlugin({ maxEntries: 50 }),\r\n    ],\r\n  })\r\n);\r\n\r\n// This allows the web app to trigger skipWaiting via\r\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\r\nself.addEventListener('message', (event) => {\r\n  if (event.data && event.data.type === 'SKIP_WAITING') {\r\n    self.skipWaiting();\r\n  }\r\n});\r\n\r\n// Any other custom service worker logic can go here.\r\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,QAA6B,cAA7B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,gBAAT,EAA2BC,uBAA3B,QAA0D,oBAA1D;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,oBAAT,QAAqC,oBAArC;AAEAL,YAAY,G,CAEZ;AACA;AACA;AACA;;AACAE,gBAAgB,CAACI,IAAI,CAACC,aAAN,CAAhB,C,CAEA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,IAAIC,MAAJ,CAAW,kBAAX,CAA5B;AACAL,aAAa,EACX;AACA,QAAsB;EAAA,IAArB;IAAEM,OAAF;IAAWC;EAAX,CAAqB;;EACpB;EACA,IAAID,OAAO,CAACE,IAAR,KAAiB,UAArB,EAAiC;IAC/B,OAAO,KAAP;EACD,CAJmB,CAIlB;;;EAEF,IAAID,GAAG,CAACE,QAAJ,CAAaC,UAAb,CAAwB,IAAxB,CAAJ,EAAmC;IACjC,OAAO,KAAP;EACD,CARmB,CAQlB;;;EAEF,IAAIH,GAAG,CAACE,QAAJ,CAAaE,KAAb,CAAmBP,mBAAnB,CAAJ,EAA6C;IAC3C,OAAO,KAAP;EACD,CAZmB,CAYlB;;;EAEF,OAAO,IAAP;AACD,CAjBU,EAkBXL,uBAAuB,CAACa,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyB,aAA1B,CAlBZ,CAAb,C,CAqBA;AACA;;AACAd,aAAa,EACX;AACA;EAAA,IAAC;IAAEO;EAAF,CAAD;EAAA,OAAaA,GAAG,CAACQ,MAAJ,KAAeb,IAAI,CAACc,QAAL,CAAcD,MAA7B,IAAuCR,GAAG,CAACE,QAAJ,CAAaQ,QAAb,CAAsB,MAAtB,CAApD;AAAA,CAFW,EAEwE;AACnF,IAAIhB,oBAAJ,CAAyB;EACvBiB,SAAS,EAAE,QADY;EAEvBC,OAAO,EAAE,CACP;EACA;EACA,IAAItB,gBAAJ,CAAqB;IAAEuB,UAAU,EAAE;EAAd,CAArB,CAHO;AAFc,CAAzB,CAHW,CAAb,C,CAaA;AACA;;AACAlB,IAAI,CAACmB,gBAAL,CAAsB,SAAtB,EAAkCC,KAAD,IAAW;EAC1C,IAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoB,cAAtC,EAAsD;IACpDtB,IAAI,CAACuB,WAAL;EACD;AACF,CAJD,E,CAMA"},"metadata":{},"sourceType":"module"}