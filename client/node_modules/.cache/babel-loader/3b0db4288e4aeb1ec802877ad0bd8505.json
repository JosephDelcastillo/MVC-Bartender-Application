{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://cra.link/PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://cra.link/PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["Z:/All/Google Drive/All/School/2022 Fall/CIS4327 - Senior Project I/MVC Bartender App/why not start again/client/src/serviceWorker.js"],"sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n        if (isLocalhost) {\r\n            // This is running on localhost. Let's check if a service worker still exists or not.\r\n            checkValidServiceWorker(swUrl, config);\r\n\r\n            // Add some additional logging to localhost, pointing developers to the\r\n            // service worker/PWA documentation.\r\n            navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n                'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n            });\r\n        } else {\r\n            // Is not localhost. Just register service worker\r\n            registerValidSW(swUrl, config);\r\n        }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            if (installingWorker == null) {\r\n            return;\r\n            }\r\n            installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                    'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n\r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                    config.onUpdate(registration);\r\n                }\r\n                } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n\r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                    config.onSuccess(registration);\r\n                }\r\n                }\r\n            }\r\n            };\r\n        };\r\n    })\r\n    .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n    .then((response) => {\r\n    // Ensure service worker exists, and that we really are getting a JS file.\r\n    const contentType = response.headers.get('content-type');\r\n    if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n    ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n        registration.unregister().then(() => {\r\n            window.location.reload();\r\n        });\r\n        });\r\n    } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n    }\r\n    })\r\n    .catch(() => {\r\n    console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\nif ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n    .then((registration) => {\r\n        registration.unregister();\r\n    })\r\n    .catch((error) => {\r\n        console.error(error.message);\r\n    });\r\n}\r\n}\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module"}